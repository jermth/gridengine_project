#! /bin/sh
### BEGIN INIT INFO
# Provides:          sgeclean
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: CycleCloud sgeclean
# Description:       This provides sgeclean for CycleCloud.
### END INIT INFO

# Author: Rob Futrick <rfutrick@cyclecomputing.com>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="SGE Cleanup Callbacks"
NAME=sgeclean
#DAEMON=/usr/sbin/$NAME
#DAEMON_ARGS="--options args"
mkdir -p /var/lock/subsys
LOCKFILE=/var/lock/subsys/sgeclean.lock
#PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME



# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        touch $LOCKFILE
        myhost=<%= @nodename %>
        mydir="<%= @sgeroot %>/host_tokens/needdelete"
        if [ -f ${mydir}/${myhost} ]; then
          rm ${mydir}/${myhost}
        fi
        return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
        echo -n "Requesting node removal..."
        myhost=<%= @nodename %>
        mydir="<%= @sgeroot %>/host_tokens/needdelete"
        if [ -d ${mydir} ]; then
                touch ${mydir}/${myhost}
        fi
  rm -f $LOCKFILE
  return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {

  return 0
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  #log_daemon_msg "Reloading $DESC" "$NAME"
  #do_reload
  #log_end_msg $?
  #;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
